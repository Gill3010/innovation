/**
 * Script de Verificaci√≥n de Migraci√≥n
 * 
 * Verifica que todos los datos se hayan migrado correctamente
 * 
 * Uso:
 *   1. Asegurarse de tener innovaproyectos-key.json
 *   2. Ejecutar: node scripts/verify-migration.js
 */

const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');

// Inicializar con NUEVO proyecto
try {
  const serviceAccount = require('./innovaproyectos-key.json');
  
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
  
  console.log('‚úÖ Firebase Admin inicializado correctamente');
} catch (error) {
  console.error('‚ùå Error al inicializar Firebase Admin');
  console.error('   Aseg√∫rate de tener el archivo innovaproyectos-key.json');
  process.exit(1);
}

const db = admin.firestore();

/**
 * Verifica una colecci√≥n
 */
async function verifyCollection(collectionName) {
  try {
    // Contar documentos
    const countSnapshot = await db.collection(collectionName).count().get();
    const count = countSnapshot.data().count;
    
    // Obtener un documento de muestra
    const sampleSnapshot = await db.collection(collectionName).limit(1).get();
    
    if (sampleSnapshot.empty) {
      console.log(`   ‚ö†Ô∏è  ${collectionName}: Colecci√≥n vac√≠a`);
      return { collection: collectionName, count: 0, status: 'empty', sample: null };
    } else {
      const sampleDoc = sampleSnapshot.docs[0];
      console.log(`   ‚úÖ ${collectionName}: ${count} documentos`);
      return { 
        collection: collectionName, 
        count: count, 
        status: 'ok',
        sampleId: sampleDoc.id
      };
    }
  } catch (error) {
    console.log(`   ‚ùå ${collectionName}: Error - ${error.message}`);
    return { collection: collectionName, count: 0, status: 'error', error: error.message };
  }
}

/**
 * Verifica √≠ndices compuestos
 */
async function verifyIndexes() {
  console.log('\nüîç Verificando √≠ndices compuestos...');
  
  const testQueries = [
    {
      name: 'Proyectos por owner y fecha',
      test: async () => {
        const q = db.collection('research_projects')
          .where('ownerId', '==', 'test-user')
          .orderBy('createdAt', 'desc')
          .limit(1);
        await q.get();
      }
    },
    {
      name: 'Papers por owner y publicaci√≥n',
      test: async () => {
        const q = db.collection('papers')
          .where('ownerId', '==', 'test-user')
          .orderBy('publicationDate', 'desc')
          .limit(1);
        await q.get();
      }
    }
  ];
  
  for (const query of testQueries) {
    try {
      await query.test();
      console.log(`   ‚úÖ ${query.name}`);
    } catch (error) {
      if (error.code === 9) {
        console.log(`   ‚ö†Ô∏è  ${query.name}: √çndice requerido (ejecutar: firebase deploy --only firestore:indexes)`);
      } else {
        console.log(`   ‚ùå ${query.name}: ${error.message}`);
      }
    }
  }
}

/**
 * Compara con metadata de backup
 */
async function compareWithBackup(results) {
  const metadataPath = path.join(__dirname, 'backup', '_metadata.json');
  
  if (!fs.existsSync(metadataPath)) {
    console.log('\n‚ö†Ô∏è  No se encontr√≥ metadata del backup para comparar');
    return;
  }
  
  console.log('\nüìä Comparaci√≥n con backup original:');
  
  const metadata = JSON.parse(fs.readFileSync(metadataPath, 'utf8'));
  console.log(`   Fecha de exportaci√≥n: ${metadata.exportDate}`);
  console.log(`   Total en backup: ${metadata.totalDocuments} documentos`);
  
  const currentTotal = results.reduce((sum, r) => sum + r.count, 0);
  console.log(`   Total importado: ${currentTotal} documentos`);
  
  if (currentTotal === metadata.totalDocuments) {
    console.log('   ‚úÖ Los totales coinciden perfectamente');
  } else {
    console.log(`   ‚ö†Ô∏è  Diferencia: ${metadata.totalDocuments - currentTotal} documentos`);
  }
  
  // Comparar por colecci√≥n
  console.log('\n   Detalle por colecci√≥n:');
  for (const result of results) {
    console.log(`   - ${result.collection}: ${result.count} docs`);
  }
}

/**
 * Genera reporte HTML
 */
function generateReport(results, startTime) {
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);
  
  const totalDocs = results.reduce((sum, r) => sum + r.count, 0);
  const successful = results.filter(r => r.status === 'ok').length;
  const failed = results.filter(r => r.status === 'error').length;
  const empty = results.filter(r => r.status === 'empty').length;
  
  const report = {
    timestamp: new Date().toISOString(),
    project: 'innovaproyectos',
    duration: `${duration}s`,
    summary: {
      totalCollections: results.length,
      successful,
      failed,
      empty,
      totalDocuments: totalDocs
    },
    collections: results
  };
  
  const reportPath = path.join(__dirname, 'verification-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  console.log(`\nüìÑ Reporte guardado en: ${reportPath}`);
  
  return report;
}

/**
 * Funci√≥n principal
 */
async function verifyMigration() {
  console.log('üîç Verificando migraci√≥n a InnovaProyectos');
  console.log('   Fecha:', new Date().toISOString());
  console.log('\nüìã Verificando colecciones...\n');
  
  const startTime = Date.now();
  
  const collections = [
    'users',
    'research_projects',
    'papers',
    'collaborations',
    'analytics'
  ];
  
  const results = [];
  
  // Verificar cada colecci√≥n
  for (const collection of collections) {
    const result = await verifyCollection(collection);
    results.push(result);
  }
  
  // Verificar √≠ndices
  await verifyIndexes();
  
  // Comparar con backup
  await compareWithBackup(results);
  
  // Generar reporte
  const report = generateReport(results, startTime);
  
  // Resumen final
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä RESUMEN DE VERIFICACI√ìN');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚úÖ Colecciones verificadas: ${report.summary.successful}`);
  console.log(`‚ö†Ô∏è  Colecciones vac√≠as: ${report.summary.empty}`);
  console.log(`‚ùå Colecciones con error: ${report.summary.failed}`);
  console.log(`üì¶ Total de documentos: ${report.summary.totalDocuments}`);
  console.log(`‚è±Ô∏è  Duraci√≥n: ${report.duration}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  if (report.summary.failed > 0) {
    console.log('‚ö†Ô∏è  Algunas verificaciones fallaron. Revisa el reporte para detalles.');
    process.exitCode = 1;
  } else {
    console.log('‚úÖ Verificaci√≥n completada exitosamente');
  }
  
  // Cerrar conexi√≥n
  await admin.app().delete();
}

// Ejecutar
verifyMigration().catch(error => {
  console.error('\n‚ùå Error fatal:', error);
  process.exit(1);
});



